# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Elixir CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    name: Build and test
    runs-on: ubuntu-22.04

    strategy: 
      matrix: 
        elixir-version: [ '1.18.1', '1.17.3', '1.16.3' ]
        otp-version: [ '27.2', '26.2.5.6', '25.3.2.16' ]
        exclude:
          - elixir-version: '1.16.3'
            otp-version: '27.2'
    steps:
    - uses: actions/checkout@v4
    - name: Set up Elixir
      id: beam
      uses: erlef/setup-beam@5304e04ea2b355f03681464e683d92e3b2f18451 # v1.18.2
      with:
        elixir-version: ${{ matrix.elixir-version }}
        otp-version: ${{ matrix.otp-version }}
    - name: Restore dependencies cache
      uses: actions/cache@v4
      with:
        path: deps
        key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
        restore-keys: ${{ runner.os }}-mix-
    - name: Install dependencies
      run: mix deps.get
    - name: Compile and check warning
      run: mix compile --warnings-as-errors
    - name: Check formatting
      run: mix format --check-formatted
    - name: Check by credo
      run: mix credo

    # Cache key based on Erlang/Elixir version and the mix.lock hash
    - name: Restore PLT cache
      id: plt_cache
      uses: actions/cache/restore@v4
      with:
        key: |
          plt-${{ runner.os }}-${{ steps.beam.outputs.otp-version }}-${{ steps.beam.outputs.elixir-version }}-${{ hashFiles('**/mix.lock') }}
        restore-keys: |
          plt-${{ runner.os }}-${{ steps.beam.outputs.otp-version }}-${{ steps.beam.outputs.elixir-version }}-
        path: |
          priv/plts

    # Create PLTs if no cache was found
    - name: Create PLTs
      if: steps.plt_cache.outputs.cache-hit != 'true'
      run: mix dialyzer --plt

    # By default, the GitHub Cache action will only save the cache if all steps in the job succeed,
    # so we separate the cache restore and save steps in case running dialyzer fails.
    - name: Save PLT cache
      id: plt_cache_save
      uses: actions/cache/save@v4
      if: steps.plt_cache.outputs.cache-hit != 'true'
      with:
        key: |
          plt-${{ runner.os }}-${{ steps.beam.outputs.otp-version }}-${{ steps.beam.outputs.elixir-version }}-${{ hashFiles('**/mix.lock') }}
        path: |
          priv/plts

    - name: Run dialyzer
      # Two formats are included for ease of debugging and it is lightly recommended to use both, see https://github.com/jeremyjh/dialyxir/issues/530 for reasoning
      # --format github is helpful to print the warnings in a way that GitHub understands and can place on the /files page of a PR
      # --format dialyxir allows the raw GitHub actions logs to be useful because they have the full warning printed
      run: mix dialyzer --format github --format dialyxir

    - name: Run tests
      run: mix test
    - name: Documentation
      run: mix docs --warnings-as-errors
